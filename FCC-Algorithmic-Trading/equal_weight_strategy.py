# -*- coding: utf-8 -*-
"""Stonks

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13wsVWjfrWtrLCnviAv1YSJSiv4hyKQP4

Using IEX Cloud Sandbox with Sandbox token.
Videos used:
https://www.youtube.com/watch?v=xfzGZB4HhEE and
https://www.youtube.com/watch?v=JwSS70SZdyM (Chapter 5)
"""
# Started out on colaboratory but found it too slow and inconsistent. Switched to Atom as a source code editor

# pip install XlsxWriter

import pandas as pd
import numpy as np
import requests
import math
import xlsxwriter

IEX_CLOUD_API_TOKEN = # Your API Token here in "" or by importing a file above and calling the variable here


def load_data():
    url = "https://en.wikipedia.org/wiki/List_of_S%26P_500_companies"
    html = pd.read_html(url, header=0)
    df = html[0]
    return df


stocks = load_data()

symbol = "AAPL"
api_url = f"https://sandbox.iexapis.com/stable/stock/{symbol}\
/quote/?token={IEX_CLOUD_API_TOKEN}"
data = requests.get(api_url).json()

"""Parsing API Call"""

price = data["latestPrice"]
market_cap = data["marketCap"]

"""Adding stocks to Pandas dataframe"""

my_columns = [
    "Ticker",
    "Stock Price",
    "Market Capitalisation",
    "Number of Shares to Buy"]
final_dataframe = pd.DataFrame(columns=my_columns)
# final_dataframe

final_dataframe.append(
    pd.Series(
        [
            symbol,
            price,
            market_cap,
            "N/A"
        ],
        index=my_columns
    ),
    ignore_index=True
)

"""Looping through Tickers in list of stocks"""

final_dataframe = pd.DataFrame(columns=my_columns)
for stock in stocks["Symbol"][:5]:
    api_url = f"https://sandbox.iexapis.com/stable/stock/{stock}/quote/?token={IEX_CLOUD_API_TOKEN}"  # noqa
    data = requests.get(api_url).json()
    final_dataframe = final_dataframe.append(
        pd.Series(
            [
                stock,
                data["latestPrice"],
                data["marketCap"],
                "N/A"
            ],
            index=my_columns
        ),
        ignore_index=True
    )

# final_dataframe

"""Using Batch API Calls to improve performance"""

"""
First we must split all our Tickers into groups of 100 as IEX supports batch
calls up to 100
"""


def chunks(lst, n):
    """Yield successive n-sized chunks from lst."""
    for i in range(0, len(lst), n):
        yield lst[i:i + n]


symbol_groups = list(chunks(stocks["Symbol"], 100))
symbol_strings = []
# symbol_groups
for i in range(0, len(symbol_groups)):
    symbol_strings.append(",".join(symbol_groups[i]))
#  print(symbol_strings[i])

final_dataframe = pd.DataFrame(columns=my_columns)
for symbol_string in symbol_strings:
    batch_api_call_url = f"https://sandbox.iexapis.com/stable/stock/market/batch?symbols={symbol_string}&types=quote&token={IEX_CLOUD_API_TOKEN}"  # noqa
    data = requests.get(batch_api_call_url).json()
    for symbol in symbol_string.split(","):
        final_dataframe = final_dataframe.append(
            pd.Series(
                [
                    symbol,
                    data[symbol]["quote"]["latestPrice"],
                    data[symbol]["quote"]["marketCap"],
                    "N/A"
                ],
                index=my_columns
            ),
            ignore_index=True
        )
# final_dataframe

"""Calculate number of shares to buy"""

portfolio_size = input("Enter the value of your portfolio:")

try:
    val = float(portfolio_size)
except ValueError:
    print("That's not a number! \nPlease try again")
    portfolio_size = input("Enter the value of your portfolio:")
    val = float(portfolio_size)

position_size = val/len(final_dataframe.index)
# print(position_size)

# number_of_apple_shares = position_size/500
# print(math.floor(number_of_apple_shares))

for i in range(0, len(final_dataframe.index)):
    final_dataframe.loc[i, "Number of Shares to Buy"] = math.floor(
        position_size/final_dataframe.loc[i, "Stock Price"])
# final_dataframe

"""Save into xlsx file"""

writer = pd.ExcelWriter("Recommended Trades.xlsx", engine="xlsxwriter")
final_dataframe.to_excel(writer, "Recommended Trades", index=False)

background_color = "#0a0a23"
font_color = "#ffffff"

string_format = writer.book.add_format(
    {
        "font_color": font_color,
        "bg_color": background_color,
        "border": 1
    }
)

dollar_format = writer.book.add_format(
    {
        "num_format": "$0.00",
        "font_color": font_color,
        "bg_color": background_color,
        "border": 1
    }
)

integer_format = writer.book.add_format(
    {
        "num_format": "0",
        "font_color": font_color,
        "bg_color": background_color,
        "border": 1
    }
)
"""
writer.sheets["Recommended Trades"].set_column("A:A", 18, string_format)
writer.sheets["Recommended Trades"].set_column("B:B", 18, string_format)
writer.sheets["Recommended Trades"].set_column("C:C", 18, string_format)
writer.sheets["Recommended Trades"].set_column("D:D", 18, string_format)
writer.save()
"""
"""
writer.sheets["Recommended Trades"].write("A1", "Ticker", string_format)
writer.sheets["Recommended Trades"].write("B1", "Stock Price", dollar_format)
writer.sheets["Recommended Trades"].write("C1", "Market Capitalisation", dollar_format)  # noqa
writer.sheets["Recommended Trades"].write("D1", "Number of Shares to Buy", integer_format)  # noqa
"""

column_formats = {
    "A": ["Ticker", string_format],
    "B": ["Stock Price", dollar_format],
    "C": ["Market Capitalisation", dollar_format],
    "D": ["Number of Shares to Buy", integer_format],
}

for column in column_formats.keys():
    writer.sheets["Recommended Trades"].set_column(
        f"{column}:{column}", 18, column_formats[column][1])
    writer.sheets["Recommended Trades"].write(
        f"{column}1", column_formats[column][0], string_format)

writer.save()
